// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("client") // client | store | courier | admin
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
  stores    Store[]
}

model Store {
  id          String    @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  owner       User      @relation(fields: [ownerId], references: [id])
  ownerId     String
  Order       Order[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Float
  store       Store     @relation(fields: [storeId], references: [id])
  storeId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  OrderItem   OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  user      User        @relation(fields: [userId], references: [id])
  userId    String
  store     Store       @relation(fields: [storeId], references: [id])
  storeId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  items     OrderItem[]
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(10, 2)
}

enum OrderStatus {
  PENDING
  ACCEPTED
  ON_THE_WAY
  DELIVERED
  CANCELED
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
